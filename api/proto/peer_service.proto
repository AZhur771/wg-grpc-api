syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "google/api/annotations.proto";

option go_package = "./;wgpb";

service PeerService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Service to configure wireguard peers"
  };

  rpc AddPeer(AddPeerRequest) returns (PeerIdRequest) {
    option (google.api.http) = {
      post: "/api/peers"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add peer"
      description: "Add peer to the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc RemovePeer(PeerIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/peers/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove peer by id"
      description: "Remove peer by id from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc UpdatePeer(UpdatePeerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/peers/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update peer by id"
      description: "Update peer by id on the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc GetPeer(PeerIdRequest) returns (Peer) {
    option (google.api.http) = {
      get: "/api/peers/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get peer by id"
      description: "Get peer by id from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc GetPeers(GetPeersRequest) returns (GetPeersResponse) {
    option (google.api.http) = {
      get: "/api/peers"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get peers"
      description: "Get peers from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc EnablePeer(PeerIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/peers/{id}/enable"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Enable peer by id"
      description: "Enable peer by id from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc DisablePeer(PeerIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/peers/{id}/disable"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Disable peer by id"
      description: "Disable peer by id from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc DownloadPeerConfig(PeerIdRequest) returns (DownloadFileResponse) {
    option (google.api.http) = {
      get: "/api/peers/{id}/config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Download peer config by id"
      description: "Download peer config by id from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };

  rpc DownloadPeerQRCode(PeerIdRequest) returns (DownloadFileResponse) {
    option (google.api.http) = {
      get: "/api/peers/{id}/qr"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Download peer qr-code by id"
      description: "Download peer qr-code by id from the server."
      tags: "PeerService"
      security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {}
        }
      }
    };
  };
}

message Peer {
  string id = 1;
  string name = 2;
  string email = 3;
  string public_key = 4;
  string endpoint = 5;
  int32 persistent_keep_alive = 6;
  repeated string allowed_ips = 7;
  uint32 protocol_version = 8;
  int64 receive_bytes = 9;
  int64 transmit_bytes = 10;
  google.protobuf.Timestamp last_handshake = 11;
  bool has_preshared_key = 12;
  bool is_enabled = 13;
  bool is_active = 14;
  repeated string tags = 15;
  string description = 16;
}

message PeerIdRequest {
  string id = 1;
}

message AddPeerRequest {
  bool add_preshared_key = 1;
  int32 persistent_keep_alive = 2;
  string description = 3;
  repeated string tags = 5;
  string name = 6;
  string email = 7;
}

message UpdatePeerRequest {
  string id = 1;
  bool add_preshared_key = 2;
  bool remove_preshared_key = 3;
  int32 persistent_keep_alive = 4;
  string description = 5;
  repeated string tags = 6;
  string name = 7;
  string email = 8;
}

message GetPeersRequest {
  int32 skip = 1;
  int32 limit = 2;
}

message GetPeersResponse {
  repeated Peer peers = 1;
  int32 total = 2;
  bool has_next = 3;
}

message DownloadFileResponse {
  string name = 1;
  int64 size = 2;
  bytes data = 3;
}
