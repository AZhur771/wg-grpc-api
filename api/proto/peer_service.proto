syntax = "proto3";

package peer;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/field_mask.proto";

import "google/api/annotations.proto";

option go_package = "./;peerpb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/AZhur771/wg-grpc-api";
    description: "gRPC+HTTP server for managing wireguard clients";
  }
  schemes: HTTP;
};

service PeerService {
  rpc AddPeer(AddPeerRequest) returns (AddPeerResponse) {
    option (google.api.http) = {
      post: "/api/peers"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a peer"
      description: "Add a peer to the server."
      tags: "Peers"
    };
  };

  rpc RemovePeer(PeerIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/peers/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove a peer by id"
      description: "Remove a peer by id from the server."
      tags: "Peers"
    };
  };

  rpc UpdatePeer(UpdatePeerRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/api/peers/{peer.id}"
      body: "*"
      additional_bindings {
        patch: "/api/peers/{peer.id}"
        body: "peer"
      }
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Update a peer by id"
      description: "Update a peer by id on the server."
      tags: "Peers"
    };
  };

  rpc GetPeer(PeerIdRequest) returns (Peer) {
    option (google.api.http) = {
      get: "/api/peers/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a peer by id"
      description: "Get a peer by id from the server."
      tags: "Peers"
    };
  };

  rpc GetPeers(google.protobuf.Empty) returns (GetPeersResponse) {
    option (google.api.http) = {
      get: "/api/peers"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get peers"
      description: "Get peers from the server."
      tags: "Peers"
    };
  };

  rpc StreamPeers(google.protobuf.Empty) returns (stream Peer) {};

  rpc EnablePeer(PeerIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/peers/{id}/enable"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Enable a peer by id"
      description: "Enable a peer by id from the server."
      tags: "Peers"
    };
  };

  rpc DisablePeer(PeerIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/api/peers/{id}/disable"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Disable a peer by id"
      description: "Disable a peer by id from the server."
      tags: "Peers"
    };
  };

  rpc DownloadPeerConfig(PeerIdRequest) returns (DownloadPeerConfigResponse) {
    option (google.api.http) = {
      get: "/api/peers/{id}/config"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Download peer config by id"
      description: "Download peer config by id from the server."
      tags: "Peers"
    };
  };
}

message Peer {
  string id = 1;
  string public_key = 2;
  string endpoint = 3;
  google.protobuf.Duration persistent_keep_alive = 4;
  repeated string allowed_ips = 5;
  uint32 protocol_version = 6;
  int64 receive_bytes = 7;
  int64 transmit_bytes = 8;
  google.protobuf.Timestamp last_handshake = 9;
  bool has_preshared_key = 10;
  bool is_enabled = 11;
  bool is_active = 12;
  string description = 13;
}

message PeerIdRequest {
  string id = 1;
}

message AddPeerRequest {
  bool add_preshared_key = 1;
  google.protobuf.Duration persistent_keep_alive = 2;
  string description = 3;
}

message AddPeerResponse {
  string id = 1;
}

message UpdatePeerRequest {
  message UpdatePeerReq {
    string id = 1;
    bool add_preshared_key = 2;
    google.protobuf.Duration persistent_keep_alive = 3;
    string description = 4;
  }

  UpdatePeerReq peer = 1;
  google.protobuf.FieldMask update_mask = 2;
}

message GetPeersResponse {
  repeated Peer peers = 1;
}

message DownloadPeerConfigResponse {
  bytes config = 1;
}
