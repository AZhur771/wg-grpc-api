// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: peer_service.proto

package peerpb

import (
	context "context"

	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error)
	RemovePeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePeer(ctx context.Context, in *UpdatePeerRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetPeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*Peer, error)
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error)
	EnablePeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DisablePeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DownloadPeerConfig(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*DownloadPeerConfigResponse, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) AddPeer(ctx context.Context, in *AddPeerRequest, opts ...grpc.CallOption) (*AddPeerResponse, error) {
	out := new(AddPeerResponse)
	err := c.cc.Invoke(ctx, "/peer.PeerService/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) RemovePeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.PeerService/RemovePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) UpdatePeer(ctx context.Context, in *UpdatePeerRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.PeerService/UpdatePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) GetPeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*Peer, error) {
	out := new(Peer)
	err := c.cc.Invoke(ctx, "/peer.PeerService/GetPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	out := new(GetPeersResponse)
	err := c.cc.Invoke(ctx, "/peer.PeerService/GetPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) EnablePeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.PeerService/EnablePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) DisablePeer(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/peer.PeerService/DisablePeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) DownloadPeerConfig(ctx context.Context, in *PeerIdRequest, opts ...grpc.CallOption) (*DownloadPeerConfigResponse, error) {
	out := new(DownloadPeerConfigResponse)
	err := c.cc.Invoke(ctx, "/peer.PeerService/DownloadPeerConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error)
	RemovePeer(context.Context, *PeerIdRequest) (*empty.Empty, error)
	UpdatePeer(context.Context, *UpdatePeerRequest) (*empty.Empty, error)
	GetPeer(context.Context, *PeerIdRequest) (*Peer, error)
	GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error)
	EnablePeer(context.Context, *PeerIdRequest) (*empty.Empty, error)
	DisablePeer(context.Context, *PeerIdRequest) (*empty.Empty, error)
	DownloadPeerConfig(context.Context, *PeerIdRequest) (*DownloadPeerConfigResponse, error)
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) AddPeer(context.Context, *AddPeerRequest) (*AddPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPeer not implemented")
}
func (UnimplementedPeerServiceServer) RemovePeer(context.Context, *PeerIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePeer not implemented")
}
func (UnimplementedPeerServiceServer) UpdatePeer(context.Context, *UpdatePeerRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeer not implemented")
}
func (UnimplementedPeerServiceServer) GetPeer(context.Context, *PeerIdRequest) (*Peer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeer not implemented")
}
func (UnimplementedPeerServiceServer) GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedPeerServiceServer) EnablePeer(context.Context, *PeerIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnablePeer not implemented")
}
func (UnimplementedPeerServiceServer) DisablePeer(context.Context, *PeerIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePeer not implemented")
}
func (UnimplementedPeerServiceServer) DownloadPeerConfig(context.Context, *PeerIdRequest) (*DownloadPeerConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPeerConfig not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).AddPeer(ctx, req.(*AddPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_RemovePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).RemovePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/RemovePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).RemovePeer(ctx, req.(*PeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_UpdatePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).UpdatePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/UpdatePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).UpdatePeer(ctx, req.(*UpdatePeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_GetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).GetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/GetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).GetPeer(ctx, req.(*PeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).GetPeers(ctx, req.(*GetPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_EnablePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).EnablePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/EnablePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).EnablePeer(ctx, req.(*PeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_DisablePeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).DisablePeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/DisablePeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).DisablePeer(ctx, req.(*PeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_DownloadPeerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).DownloadPeerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/peer.PeerService/DownloadPeerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).DownloadPeerConfig(ctx, req.(*PeerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "peer.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPeer",
			Handler:    _PeerService_AddPeer_Handler,
		},
		{
			MethodName: "RemovePeer",
			Handler:    _PeerService_RemovePeer_Handler,
		},
		{
			MethodName: "UpdatePeer",
			Handler:    _PeerService_UpdatePeer_Handler,
		},
		{
			MethodName: "GetPeer",
			Handler:    _PeerService_GetPeer_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _PeerService_GetPeers_Handler,
		},
		{
			MethodName: "EnablePeer",
			Handler:    _PeerService_EnablePeer_Handler,
		},
		{
			MethodName: "DisablePeer",
			Handler:    _PeerService_DisablePeer_Handler,
		},
		{
			MethodName: "DownloadPeerConfig",
			Handler:    _PeerService_DownloadPeerConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer_service.proto",
}
