{
  "swagger": "2.0",
  "info": {
    "title": "peer_service.proto",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "PeerService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/peers": {
      "get": {
        "summary": "Get peers",
        "description": "Get peers from the server.",
        "operationId": "PeerService_GetPeers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/peerGetPeersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Peers"
        ]
      },
      "post": {
        "summary": "Add a peer",
        "description": "Add a peer to the server.",
        "operationId": "PeerService_AddPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/peerAddPeerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/peerAddPeerRequest"
            }
          }
        ],
        "tags": [
          "Peers"
        ]
      }
    },
    "/api/peers/{id}": {
      "get": {
        "summary": "Get a peer by id",
        "description": "Get a peer by id from the server.",
        "operationId": "PeerService_GetPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/peerPeer"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Peers"
        ]
      },
      "delete": {
        "summary": "Remove a peer by id",
        "description": "Remove a peer by id from the server.",
        "operationId": "PeerService_RemovePeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Peers"
        ]
      }
    },
    "/api/peers/{id}/config": {
      "get": {
        "summary": "Download peer config by id",
        "description": "Download peer config by id from the server.",
        "operationId": "PeerService_DownloadPeerConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/peerDownloadPeerConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Peers"
        ]
      }
    },
    "/api/peers/{id}/disable": {
      "post": {
        "summary": "Disable a peer by id",
        "description": "Disable a peer by id from the server.",
        "operationId": "PeerService_DisablePeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Peers"
        ]
      }
    },
    "/api/peers/{id}/enable": {
      "post": {
        "summary": "Enable a peer by id",
        "description": "Enable a peer by id from the server.",
        "operationId": "PeerService_EnablePeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "tags": [
          "Peers"
        ]
      }
    },
    "/api/peers/{peer.id}": {
      "put": {
        "summary": "Update a peer by id",
        "description": "Update a peer by id on the server.",
        "operationId": "PeerService_UpdatePeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "peer.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "peer": {
                  "type": "object",
                  "properties": {
                    "addPresharedKey": {
                      "type": "boolean"
                    },
                    "persistentKeepAlive": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    }
                  }
                },
                "updateMask": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "tags": [
          "Peers"
        ]
      },
      "patch": {
        "summary": "Update a peer by id",
        "description": "Update a peer by id on the server.",
        "operationId": "PeerService_UpdatePeer2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "peer.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "peer",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "addPresharedKey": {
                  "type": "boolean"
                },
                "persistentKeepAlive": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "updateMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Peers"
        ]
      }
    }
  },
  "definitions": {
    "UpdatePeerRequestUpdatePeerReq": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "addPresharedKey": {
          "type": "boolean"
        },
        "persistentKeepAlive": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "peerAddPeerRequest": {
      "type": "object",
      "properties": {
        "addPresharedKey": {
          "type": "boolean"
        },
        "persistentKeepAlive": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "peerAddPeerResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "peerDownloadPeerConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "peerGetPeersResponse": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/peerPeer"
          }
        }
      }
    },
    "peerPeer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "persistentKeepAlive": {
          "type": "string"
        },
        "allowedIps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "protocolVersion": {
          "type": "integer",
          "format": "int64"
        },
        "receiveBytes": {
          "type": "string",
          "format": "int64"
        },
        "transmitBytes": {
          "type": "string",
          "format": "int64"
        },
        "lastHandshake": {
          "type": "string",
          "format": "date-time"
        },
        "hasPresharedKey": {
          "type": "boolean"
        },
        "isEnabled": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "gRPC+HTTP server for managing wireguard clients",
    "url": "https://github.com/AZhur771/wg-grpc-api"
  }
}
