// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/AZhur771/wg-grpc-api/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPeerService is a mock of PeerService interface.
type MockPeerService struct {
	ctrl     *gomock.Controller
	recorder *MockPeerServiceMockRecorder
}

// MockPeerServiceMockRecorder is the mock recorder for MockPeerService.
type MockPeerServiceMockRecorder struct {
	mock *MockPeerService
}

// NewMockPeerService creates a new mock instance.
func NewMockPeerService(ctrl *gomock.Controller) *MockPeerService {
	mock := &MockPeerService{ctrl: ctrl}
	mock.recorder = &MockPeerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerService) EXPECT() *MockPeerServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeerService) Add(ctx context.Context, addPresharedKey bool, persistentKeepAlive time.Duration, description string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, addPresharedKey, persistentKeepAlive, description)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeerServiceMockRecorder) Add(ctx, addPresharedKey, persistentKeepAlive, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeerService)(nil).Add), ctx, addPresharedKey, persistentKeepAlive, description)
}

// Delete mocks base method.
func (m *MockPeerService) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPeerServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeerService)(nil).Delete), ctx, id)
}

// DownloadConfig mocks base method.
func (m *MockPeerService) DownloadConfig(ctx context.Context, id uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadConfig", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadConfig indicates an expected call of DownloadConfig.
func (mr *MockPeerServiceMockRecorder) DownloadConfig(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadConfig", reflect.TypeOf((*MockPeerService)(nil).DownloadConfig), ctx, id)
}

// Get mocks base method.
func (m *MockPeerService) Get(ctx context.Context, id uuid.UUID) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockPeerService) GetAll(ctx context.Context, limit, skip int) (*entity.PaginatedPeers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, skip)
	ret0, _ := ret[0].(*entity.PaginatedPeers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPeerServiceMockRecorder) GetAll(ctx, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPeerService)(nil).GetAll), ctx, limit, skip)
}

// Setup mocks base method.
func (m *MockPeerService) Setup(ctx context.Context, deviceName, deviceAddress, deviceEndpoint, peerFolder string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, deviceName, deviceAddress, deviceEndpoint, peerFolder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockPeerServiceMockRecorder) Setup(ctx, deviceName, deviceAddress, deviceEndpoint, peerFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockPeerService)(nil).Setup), ctx, deviceName, deviceAddress, deviceEndpoint, peerFolder)
}

// Update mocks base method.
func (m *MockPeerService) Update(ctx context.Context, id uuid.UUID, addPresharedKey bool, persistentKeepAlive time.Duration, description string, updateMask []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, addPresharedKey, persistentKeepAlive, description, updateMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPeerServiceMockRecorder) Update(ctx, id, addPresharedKey, persistentKeepAlive, description, updateMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeerService)(nil).Update), ctx, id, addPresharedKey, persistentKeepAlive, description, updateMask)
}
