// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package storage_test is a generated GoMock package.
package storage_test

import (
	context "context"
	reflect "reflect"

	entity "github.com/AZhur771/wg-grpc-api/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPeerStorage is a mock of PeerStorage interface.
type MockPeerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPeerStorageMockRecorder
}

// MockPeerStorageMockRecorder is the mock recorder for MockPeerStorage.
type MockPeerStorageMockRecorder struct {
	mock *MockPeerStorage
}

// NewMockPeerStorage creates a new mock instance.
func NewMockPeerStorage(ctrl *gomock.Controller) *MockPeerStorage {
	mock := &MockPeerStorage{ctrl: ctrl}
	mock.recorder = &MockPeerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerStorage) EXPECT() *MockPeerStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPeerStorage) Create(ctx context.Context, peer *entity.Peer) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, peer)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPeerStorageMockRecorder) Create(ctx, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPeerStorage)(nil).Create), ctx, peer)
}

// Delete mocks base method.
func (m *MockPeerStorage) Delete(ctx context.Context, id uuid.UUID) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPeerStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeerStorage)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPeerStorage) Get(ctx context.Context, id uuid.UUID) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerStorageMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerStorage)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockPeerStorage) GetAll(ctx context.Context, limit, skip int) ([]*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, limit, skip)
	ret0, _ := ret[0].([]*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPeerStorageMockRecorder) GetAll(ctx, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPeerStorage)(nil).GetAll), ctx, limit, skip)
}

// Sync mocks base method.
func (m *MockPeerStorage) Sync(ctx context.Context, peerFolder string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, peerFolder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockPeerStorageMockRecorder) Sync(ctx, peerFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockPeerStorage)(nil).Sync), ctx, peerFolder)
}

// Update mocks base method.
func (m *MockPeerStorage) Update(ctx context.Context, id uuid.UUID, peer *entity.Peer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPeerStorageMockRecorder) Update(ctx, id, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeerStorage)(nil).Update), ctx, id, peer)
}
