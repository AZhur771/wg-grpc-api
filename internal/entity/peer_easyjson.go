// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package entity

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC1b1d248DecodeGithubComAZhur771WgGrpcApiInternalEntity(in *jlexer.Lexer, out *Peer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "name":
			out.Name = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "privateKey":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PrivateKey[:], in.Bytes())
			}
		case "publicKey":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PublicKey[:], in.Bytes())
			}
		case "presharedKey":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PresharedKey[:], in.Bytes())
			}
		case "persistentKeepAliveInterval":
			out.PersistentKeepaliveInterval = time.Duration(in.Int64())
		case "allowedIps":
			if in.IsNull() {
				in.Skip()
				out.AllowedIPs = nil
			} else {
				in.Delim('[')
				if out.AllowedIPs == nil {
					if !in.IsDelim(']') {
						out.AllowedIPs = make([]string, 0, 4)
					} else {
						out.AllowedIPs = []string{}
					}
				} else {
					out.AllowedIPs = (out.AllowedIPs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.AllowedIPs = append(out.AllowedIPs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hasPresharedKey":
			out.HasPresharedKey = bool(in.Bool())
		case "isEnabled":
			out.IsEnabled = bool(in.Bool())
		case "description":
			out.Description = string(in.String())
		case "tags":
			if in.IsNull() {
				in.Skip()
				out.Tags = nil
			} else {
				in.Delim('[')
				if out.Tags == nil {
					if !in.IsDelim(']') {
						out.Tags = make([]string, 0, 4)
					} else {
						out.Tags = []string{}
					}
				} else {
					out.Tags = (out.Tags)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Tags = append(out.Tags, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC1b1d248EncodeGithubComAZhur771WgGrpcApiInternalEntity(out *jwriter.Writer, in Peer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"privateKey\":"
		out.RawString(prefix)
		out.Base64Bytes(in.PrivateKey[:])
	}
	{
		const prefix string = ",\"publicKey\":"
		out.RawString(prefix)
		out.Base64Bytes(in.PublicKey[:])
	}
	{
		const prefix string = ",\"presharedKey\":"
		out.RawString(prefix)
		out.Base64Bytes(in.PresharedKey[:])
	}
	{
		const prefix string = ",\"persistentKeepAliveInterval\":"
		out.RawString(prefix)
		out.Int64(int64(in.PersistentKeepaliveInterval))
	}
	{
		const prefix string = ",\"allowedIps\":"
		out.RawString(prefix)
		if in.AllowedIPs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.AllowedIPs {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hasPresharedKey\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPresharedKey))
	}
	{
		const prefix string = ",\"isEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEnabled))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Tags {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Peer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC1b1d248EncodeGithubComAZhur771WgGrpcApiInternalEntity(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Peer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC1b1d248EncodeGithubComAZhur771WgGrpcApiInternalEntity(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Peer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC1b1d248DecodeGithubComAZhur771WgGrpcApiInternalEntity(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Peer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC1b1d248DecodeGithubComAZhur771WgGrpcApiInternalEntity(l, v)
}
