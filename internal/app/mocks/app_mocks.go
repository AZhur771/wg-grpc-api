// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package app_mocks is a generated GoMock package.
package app_mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	dto "github.com/AZhur771/wg-grpc-api/internal/dto"
	entity "github.com/AZhur771/wg-grpc-api/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	sqlx "github.com/jmoiron/sqlx"
	fieldmask_utils "github.com/mennanov/fieldmask-utils"
	wgtypes "golang.zx2c4.com/wireguard/wgctrl/wgtypes"
)

// MockWgCtrl is a mock of WgCtrl interface.
type MockWgCtrl struct {
	ctrl     *gomock.Controller
	recorder *MockWgCtrlMockRecorder
}

// MockWgCtrlMockRecorder is the mock recorder for MockWgCtrl.
type MockWgCtrlMockRecorder struct {
	mock *MockWgCtrl
}

// NewMockWgCtrl creates a new mock instance.
func NewMockWgCtrl(ctrl *gomock.Controller) *MockWgCtrl {
	mock := &MockWgCtrl{ctrl: ctrl}
	mock.recorder = &MockWgCtrlMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWgCtrl) EXPECT() *MockWgCtrlMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWgCtrl) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWgCtrlMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWgCtrl)(nil).Close))
}

// ConfigureDevice mocks base method.
func (m *MockWgCtrl) ConfigureDevice(name string, cfg wgtypes.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureDevice", name, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureDevice indicates an expected call of ConfigureDevice.
func (mr *MockWgCtrlMockRecorder) ConfigureDevice(name, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDevice", reflect.TypeOf((*MockWgCtrl)(nil).ConfigureDevice), name, cfg)
}

// Device mocks base method.
func (m *MockWgCtrl) Device(name string) (*wgtypes.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Device", name)
	ret0, _ := ret[0].(*wgtypes.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Device indicates an expected call of Device.
func (mr *MockWgCtrlMockRecorder) Device(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Device", reflect.TypeOf((*MockWgCtrl)(nil).Device), name)
}

// Devices mocks base method.
func (m *MockWgCtrl) Devices() ([]*wgtypes.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Devices")
	ret0, _ := ret[0].([]*wgtypes.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Devices indicates an expected call of Devices.
func (mr *MockWgCtrlMockRecorder) Devices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Devices", reflect.TypeOf((*MockWgCtrl)(nil).Devices))
}

// MockPeerService is a mock of PeerService interface.
type MockPeerService struct {
	ctrl     *gomock.Controller
	recorder *MockPeerServiceMockRecorder
}

// MockPeerServiceMockRecorder is the mock recorder for MockPeerService.
type MockPeerServiceMockRecorder struct {
	mock *MockPeerService
}

// NewMockPeerService creates a new mock instance.
func NewMockPeerService(ctrl *gomock.Controller) *MockPeerService {
	mock := &MockPeerService{ctrl: ctrl}
	mock.recorder = &MockPeerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerService) EXPECT() *MockPeerServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeerService) Add(ctx context.Context, dt dto.AddPeerDTO) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, dt)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeerServiceMockRecorder) Add(ctx, dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeerService)(nil).Add), ctx, dt)
}

// Disable mocks base method.
func (m *MockPeerService) Disable(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockPeerServiceMockRecorder) Disable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockPeerService)(nil).Disable), ctx, id)
}

// DownloadConfig mocks base method.
func (m *MockPeerService) DownloadConfig(ctx context.Context, id uuid.UUID) (dto.DownloadFileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadConfig", ctx, id)
	ret0, _ := ret[0].(dto.DownloadFileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadConfig indicates an expected call of DownloadConfig.
func (mr *MockPeerServiceMockRecorder) DownloadConfig(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadConfig", reflect.TypeOf((*MockPeerService)(nil).DownloadConfig), ctx, id)
}

// DownloadQRCode mocks base method.
func (m *MockPeerService) DownloadQRCode(ctx context.Context, id uuid.UUID) (dto.DownloadFileDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadQRCode", ctx, id)
	ret0, _ := ret[0].(dto.DownloadFileDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadQRCode indicates an expected call of DownloadQRCode.
func (mr *MockPeerServiceMockRecorder) DownloadQRCode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadQRCode", reflect.TypeOf((*MockPeerService)(nil).DownloadQRCode), ctx, id)
}

// Enable mocks base method.
func (m *MockPeerService) Enable(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockPeerServiceMockRecorder) Enable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockPeerService)(nil).Enable), ctx, id)
}

// Get mocks base method.
func (m *MockPeerService) Get(ctx context.Context, id uuid.UUID) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockPeerService) GetAll(ctx context.Context, dt dto.GetPeersRequestDTO) (dto.GetPeersResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, dt)
	ret0, _ := ret[0].(dto.GetPeersResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPeerServiceMockRecorder) GetAll(ctx, dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPeerService)(nil).GetAll), ctx, dt)
}

// Remove mocks base method.
func (m *MockPeerService) Remove(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPeerServiceMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPeerService)(nil).Remove), ctx, id)
}

// Update mocks base method.
func (m *MockPeerService) Update(ctx context.Context, dt dto.UpdatePeerDTO, mask fieldmask_utils.Mask) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dt, mask)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPeerServiceMockRecorder) Update(ctx, dt, mask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeerService)(nil).Update), ctx, dt, mask)
}

// MockDeviceService is a mock of DeviceService interface.
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService.
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance.
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDeviceService) Add(ctx context.Context, dt dto.AddDeviceDTO) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, dt)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDeviceServiceMockRecorder) Add(ctx, dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDeviceService)(nil).Add), ctx, dt)
}

// ConfigureDevice mocks base method.
func (m *MockDeviceService) ConfigureDevice(device string, config wgtypes.PeerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureDevice", device, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureDevice indicates an expected call of ConfigureDevice.
func (mr *MockDeviceServiceMockRecorder) ConfigureDevice(device, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDevice", reflect.TypeOf((*MockDeviceService)(nil).ConfigureDevice), device, config)
}

// Get mocks base method.
func (m *MockDeviceService) Get(ctx context.Context, id uuid.UUID) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeviceServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeviceService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockDeviceService) GetAll(ctx context.Context, dt dto.GetDevicesRequestDTO) (dto.GetDevicesResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, dt)
	ret0, _ := ret[0].(dto.GetDevicesResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDeviceServiceMockRecorder) GetAll(ctx, dt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDeviceService)(nil).GetAll), ctx, dt)
}

// GetConfiguredPeer mocks base method.
func (m *MockDeviceService) GetConfiguredPeer(dev string, publicKey wgtypes.Key) (wgtypes.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredPeer", dev, publicKey)
	ret0, _ := ret[0].(wgtypes.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredPeer indicates an expected call of GetConfiguredPeer.
func (mr *MockDeviceServiceMockRecorder) GetConfiguredPeer(dev, publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredPeer", reflect.TypeOf((*MockDeviceService)(nil).GetConfiguredPeer), dev, publicKey)
}

// GetConfiguredPeers mocks base method.
func (m *MockDeviceService) GetConfiguredPeers(dev string) ([]wgtypes.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfiguredPeers", dev)
	ret0, _ := ret[0].([]wgtypes.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfiguredPeers indicates an expected call of GetConfiguredPeers.
func (mr *MockDeviceServiceMockRecorder) GetConfiguredPeers(dev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfiguredPeers", reflect.TypeOf((*MockDeviceService)(nil).GetConfiguredPeers), dev)
}

// Remove mocks base method.
func (m *MockDeviceService) Remove(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDeviceServiceMockRecorder) Remove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDeviceService)(nil).Remove), ctx, id)
}

// Update mocks base method.
func (m *MockDeviceService) Update(ctx context.Context, dt dto.UpdateDeviceDTO, mask fieldmask_utils.Mask) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dt, mask)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeviceServiceMockRecorder) Update(ctx, dt, mask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceService)(nil).Update), ctx, dt, mask)
}

// MockPeerRepo is a mock of PeerRepo interface.
type MockPeerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPeerRepoMockRecorder
}

// MockPeerRepoMockRecorder is the mock recorder for MockPeerRepo.
type MockPeerRepoMockRecorder struct {
	mock *MockPeerRepo
}

// NewMockPeerRepo creates a new mock instance.
func NewMockPeerRepo(ctrl *gomock.Controller) *MockPeerRepo {
	mock := &MockPeerRepo{ctrl: ctrl}
	mock.recorder = &MockPeerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerRepo) EXPECT() *MockPeerRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeerRepo) Add(ctx context.Context, tx *sqlx.Tx, peer *entity.Peer) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, tx, peer)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeerRepoMockRecorder) Add(ctx, tx, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeerRepo)(nil).Add), ctx, tx, peer)
}

// BeginTxx mocks base method.
func (m *MockPeerRepo) BeginTxx(ctx context.Context, options *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, options)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MockPeerRepoMockRecorder) BeginTxx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MockPeerRepo)(nil).BeginTxx), ctx, options)
}

// Count mocks base method.
func (m *MockPeerRepo) Count(ctx context.Context, tx *sqlx.Tx, deviceID uuid.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, tx, deviceID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPeerRepoMockRecorder) Count(ctx, tx, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPeerRepo)(nil).Count), ctx, tx, deviceID)
}

// Get mocks base method.
func (m *MockPeerRepo) Get(ctx context.Context, tx *sqlx.Tx, id uuid.UUID) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tx, id)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerRepoMockRecorder) Get(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerRepo)(nil).Get), ctx, tx, id)
}

// GetAll mocks base method.
func (m *MockPeerRepo) GetAll(ctx context.Context, tx *sqlx.Tx, skip, limit int, search string, deviceID uuid.UUID) ([]*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, tx, skip, limit, search, deviceID)
	ret0, _ := ret[0].([]*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPeerRepoMockRecorder) GetAll(ctx, tx, skip, limit, search, deviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPeerRepo)(nil).GetAll), ctx, tx, skip, limit, search, deviceID)
}

// Remove mocks base method.
func (m *MockPeerRepo) Remove(ctx context.Context, tx *sqlx.Tx, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPeerRepoMockRecorder) Remove(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPeerRepo)(nil).Remove), ctx, tx, id)
}

// Update mocks base method.
func (m *MockPeerRepo) Update(ctx context.Context, tx *sqlx.Tx, peer *entity.Peer) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, peer)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPeerRepoMockRecorder) Update(ctx, tx, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeerRepo)(nil).Update), ctx, tx, peer)
}

// MockDeviceRepo is a mock of DeviceRepo interface.
type MockDeviceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepoMockRecorder
}

// MockDeviceRepoMockRecorder is the mock recorder for MockDeviceRepo.
type MockDeviceRepoMockRecorder struct {
	mock *MockDeviceRepo
}

// NewMockDeviceRepo creates a new mock instance.
func NewMockDeviceRepo(ctrl *gomock.Controller) *MockDeviceRepo {
	mock := &MockDeviceRepo{ctrl: ctrl}
	mock.recorder = &MockDeviceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepo) EXPECT() *MockDeviceRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockDeviceRepo) Add(ctx context.Context, tx *sqlx.Tx, dev *entity.Device) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, tx, dev)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockDeviceRepoMockRecorder) Add(ctx, tx, dev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockDeviceRepo)(nil).Add), ctx, tx, dev)
}

// BeginTxx mocks base method.
func (m *MockDeviceRepo) BeginTxx(ctx context.Context, options *sql.TxOptions) (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxx", ctx, options)
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTxx indicates an expected call of BeginTxx.
func (mr *MockDeviceRepoMockRecorder) BeginTxx(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxx", reflect.TypeOf((*MockDeviceRepo)(nil).BeginTxx), ctx, options)
}

// Count mocks base method.
func (m *MockDeviceRepo) Count(ctx context.Context, tx *sqlx.Tx) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, tx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockDeviceRepoMockRecorder) Count(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockDeviceRepo)(nil).Count), ctx, tx)
}

// GenerateAddress mocks base method.
func (m *MockDeviceRepo) GenerateAddress(ctx context.Context, tx *sqlx.Tx, dev *entity.Device) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAddress", ctx, tx, dev)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAddress indicates an expected call of GenerateAddress.
func (mr *MockDeviceRepoMockRecorder) GenerateAddress(ctx, tx, dev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAddress", reflect.TypeOf((*MockDeviceRepo)(nil).GenerateAddress), ctx, tx, dev)
}

// Get mocks base method.
func (m *MockDeviceRepo) Get(ctx context.Context, tx *sqlx.Tx, id uuid.UUID) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tx, id)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDeviceRepoMockRecorder) Get(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeviceRepo)(nil).Get), ctx, tx, id)
}

// GetAll mocks base method.
func (m *MockDeviceRepo) GetAll(ctx context.Context, tx *sqlx.Tx, skip, limit int, search string) ([]*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, tx, skip, limit, search)
	ret0, _ := ret[0].([]*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDeviceRepoMockRecorder) GetAll(ctx, tx, skip, limit, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDeviceRepo)(nil).GetAll), ctx, tx, skip, limit, search)
}

// Remove mocks base method.
func (m *MockDeviceRepo) Remove(ctx context.Context, tx *sqlx.Tx, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockDeviceRepoMockRecorder) Remove(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockDeviceRepo)(nil).Remove), ctx, tx, id)
}

// Update mocks base method.
func (m *MockDeviceRepo) Update(ctx context.Context, tx *sqlx.Tx, dev *entity.Device) (*entity.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, dev)
	ret0, _ := ret[0].(*entity.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDeviceRepoMockRecorder) Update(ctx, tx, dev interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceRepo)(nil).Update), ctx, tx, dev)
}
