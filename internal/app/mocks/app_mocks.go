// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package app_mocks is a generated GoMock package.
package app_mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/AZhur771/wg-grpc-api/internal/entity"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	zapcore "go.uber.org/zap/zapcore"
	wgtypes "golang.zx2c4.com/wireguard/wgctrl/wgtypes"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 string, arg1 ...zapcore.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 string, arg1 ...zapcore.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string, arg1 ...zapcore.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(arg0 string, arg1 ...zapcore.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}

// MockWg is a mock of Wg interface.
type MockWg struct {
	ctrl     *gomock.Controller
	recorder *MockWgMockRecorder
}

// MockWgMockRecorder is the mock recorder for MockWg.
type MockWgMockRecorder struct {
	mock *MockWg
}

// NewMockWg creates a new mock instance.
func NewMockWg(ctrl *gomock.Controller) *MockWg {
	mock := &MockWg{ctrl: ctrl}
	mock.recorder = &MockWgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWg) EXPECT() *MockWgMockRecorder {
	return m.recorder
}

// ConfigureDevice mocks base method.
func (m *MockWg) ConfigureDevice(config wgtypes.PeerConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureDevice", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureDevice indicates an expected call of ConfigureDevice.
func (mr *MockWgMockRecorder) ConfigureDevice(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureDevice", reflect.TypeOf((*MockWg)(nil).ConfigureDevice), config)
}

// GetDevice mocks base method.
func (m *MockWg) GetDevice() (*wgtypes.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice")
	ret0, _ := ret[0].(*wgtypes.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockWgMockRecorder) GetDevice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockWg)(nil).GetDevice))
}

// GetPeer mocks base method.
func (m *MockWg) GetPeer(publicKey wgtypes.Key) (wgtypes.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeer", publicKey)
	ret0, _ := ret[0].(wgtypes.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeer indicates an expected call of GetPeer.
func (mr *MockWgMockRecorder) GetPeer(publicKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeer", reflect.TypeOf((*MockWg)(nil).GetPeer), publicKey)
}

// GetPeers mocks base method.
func (m *MockWg) GetPeers() ([]wgtypes.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeers")
	ret0, _ := ret[0].([]wgtypes.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeers indicates an expected call of GetPeers.
func (mr *MockWgMockRecorder) GetPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeers", reflect.TypeOf((*MockWg)(nil).GetPeers))
}

// MockPeerService is a mock of PeerService interface.
type MockPeerService struct {
	ctrl     *gomock.Controller
	recorder *MockPeerServiceMockRecorder
}

// MockPeerServiceMockRecorder is the mock recorder for MockPeerService.
type MockPeerServiceMockRecorder struct {
	mock *MockPeerService
}

// NewMockPeerService creates a new mock instance.
func NewMockPeerService(ctrl *gomock.Controller) *MockPeerService {
	mock := &MockPeerService{ctrl: ctrl}
	mock.recorder = &MockPeerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerService) EXPECT() *MockPeerServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPeerService) Add(ctx context.Context, addPresharedKey bool, persistentKeepAlive time.Duration, description string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, addPresharedKey, persistentKeepAlive, description)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPeerServiceMockRecorder) Add(ctx, addPresharedKey, persistentKeepAlive, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPeerService)(nil).Add), ctx, addPresharedKey, persistentKeepAlive, description)
}

// Delete mocks base method.
func (m *MockPeerService) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPeerServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeerService)(nil).Delete), ctx, id)
}

// Disable mocks base method.
func (m *MockPeerService) Disable(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disable indicates an expected call of Disable.
func (mr *MockPeerServiceMockRecorder) Disable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable", reflect.TypeOf((*MockPeerService)(nil).Disable), ctx, id)
}

// DownloadConfig mocks base method.
func (m *MockPeerService) DownloadConfig(ctx context.Context, id uuid.UUID) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadConfig", ctx, id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadConfig indicates an expected call of DownloadConfig.
func (mr *MockPeerServiceMockRecorder) DownloadConfig(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadConfig", reflect.TypeOf((*MockPeerService)(nil).DownloadConfig), ctx, id)
}

// Enable mocks base method.
func (m *MockPeerService) Enable(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enable", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enable indicates an expected call of Enable.
func (mr *MockPeerServiceMockRecorder) Enable(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enable", reflect.TypeOf((*MockPeerService)(nil).Enable), ctx, id)
}

// Get mocks base method.
func (m *MockPeerService) Get(ctx context.Context, id uuid.UUID) (*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerService)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockPeerService) GetAll(ctx context.Context) ([]*entity.Peer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.Peer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPeerServiceMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPeerService)(nil).GetAll), ctx)
}

// Setup mocks base method.
func (m *MockPeerService) Setup(ctx context.Context, deviceName, deviceAddress, deviceEndpoint, peerFolder string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, deviceName, deviceAddress, deviceEndpoint, peerFolder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockPeerServiceMockRecorder) Setup(ctx, deviceName, deviceAddress, deviceEndpoint, peerFolder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockPeerService)(nil).Setup), ctx, deviceName, deviceAddress, deviceEndpoint, peerFolder)
}

// Update mocks base method.
func (m *MockPeerService) Update(ctx context.Context, id uuid.UUID, addPresharedKey bool, persistentKeepAlive time.Duration, description string, updateMask []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, addPresharedKey, persistentKeepAlive, description, updateMask)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPeerServiceMockRecorder) Update(ctx, id, addPresharedKey, persistentKeepAlive, description, updateMask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeerService)(nil).Update), ctx, id, addPresharedKey, persistentKeepAlive, description, updateMask)
}

// MockPeerStorage is a mock of PeerStorage interface.
type MockPeerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPeerStorageMockRecorder
}

// MockPeerStorageMockRecorder is the mock recorder for MockPeerStorage.
type MockPeerStorageMockRecorder struct {
	mock *MockPeerStorage
}

// NewMockPeerStorage creates a new mock instance.
func NewMockPeerStorage(ctrl *gomock.Controller) *MockPeerStorage {
	mock := &MockPeerStorage{ctrl: ctrl}
	mock.recorder = &MockPeerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerStorage) EXPECT() *MockPeerStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPeerStorage) Create(ctx context.Context, peer *entity.PersistedPeer) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, peer)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPeerStorageMockRecorder) Create(ctx, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPeerStorage)(nil).Create), ctx, peer)
}

// Delete mocks base method.
func (m *MockPeerStorage) Delete(ctx context.Context, id uuid.UUID) (*entity.PersistedPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*entity.PersistedPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPeerStorageMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPeerStorage)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPeerStorage) Get(ctx context.Context, id uuid.UUID) (*entity.PersistedPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*entity.PersistedPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPeerStorageMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPeerStorage)(nil).Get), ctx, id)
}

// GetAll mocks base method.
func (m *MockPeerStorage) GetAll(ctx context.Context) ([]*entity.PersistedPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*entity.PersistedPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPeerStorageMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPeerStorage)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockPeerStorage) Update(ctx context.Context, id uuid.UUID, peer *entity.PersistedPeer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPeerStorageMockRecorder) Update(ctx, id, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPeerStorage)(nil).Update), ctx, id, peer)
}
